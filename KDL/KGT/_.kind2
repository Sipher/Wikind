#kdl_name = KGT
#kdl_state = KDL.KGT.init
KDL.KGT (action: KDL.KGT.Action) : (Kindelia.IO KDL.KGT.Response)

// TODO Add verification methods on Transfer Action
// TODO Add verification methods on Mine Action
// TODO Make the check balance action look better

// Mine action
KDL.KGT (KDL.KGT.Action.mint user) = 
  (Kindelia.IO.do_take (state: KDL.KGT.State) => 
    (Kindelia.IO.do_tick (tick: U120) => (
      let state = User.Sipher.KGT.mint user tick state
        (Kindelia.IO.do_save state (_: Unit) => 
          Kindelia.IO.done (KDL.KGT.Response.mint Bool.true)
        )
      )
    )
  )


// Transfer action
KDL.KGT (KDL.KGT.Action.send from to value) =
  (Kindelia.IO.do_take (state: KDL.KGT.State) => 
    let state = User.Sipher.KGT.transfer from to value state
    (Kindelia.IO.do_save state (_: Unit) => 
      Kindelia.IO.done (KDL.KGT.Response.send Bool.true)
    )
  )
  
// Check Balance action
KDL.KGT (KDL.KGT.Action.get user) = 
  (Kindelia.IO.do_take (state: KDL.KGT.State) => 
    (Kindelia.IO.do_save state (_: Unit) =>
    let balance = User.Sipher.KGT.get user state
    Kindelia.IO.done (KDL.KGT.Response.get balance)
    )
  )


// Auxiliar Function to verify if the the caller is indeed the owner of the
// account
//#kdl_name = KgtVerify
//KDL.KGT.verify (verif: Bool) (from: U120) (to: U120) (value: U120) : (Kindelia.IO KDL.KGT.Response)
//// If the Sender is the owner, it will success and the transfer will happen
//KDL.KGT.verify Bool.true from to value =
  //(Kindelia.IO.do_take (state: KDL.KGT.State) => 
    //let state = User.Sipher.KGT.transfer from to value state
    //(Kindelia.IO.do_save state (_: Unit) => 
      //Kindelia.IO.done (KDL.KGT.Response.send Bool.true)
    //)
  //)
//// If the sender is not the owner of that account, the transaction will fail
//KDL.KGT.verify Bool.false from to value = Kindelia.IO.done (KDL.KGT.Response.send Bool.false)

KDL.KGT.init : KDL.KGT.State {
  (KDL.KGT.State.new (U120.new 0 0) User.Sipher.PatriciaTree.empty)
}
