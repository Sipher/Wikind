//Test Function to add money
#kdl_name = KgtMint
User.Sipher.KGT.mint
  (miner: U120)
  (cur_blck: U120)
  (state: KDL.KGT.State)
: KDL.KGT.State
User.Sipher.KGT.mint miner cur_blck (KDL.KGT.State.new last_mint balances) =

// Constants 
// -----------------------------------------------------------------------------
  // Total blocks per halving
  let bk_base = U120.new 0 125000000

  // Xp Per Halving Base Starts with "21000000000000000000" (21 Quintillion)
  let xp_base = U120.new 18 247412917076754432
// -----------------------------------------------------------------------------

  // Halving number is increased by 1 every 125000000 (125 Million) blocks
  let halving = U120.div last_mint bk_base

  // No experience can be obtained once halving reaches 38
  // This function becomes useless on block 64
  if (U120.greater_equal halving (U120.new 0 64)) {
    KDL.KGT.State.new last_mint balances
  } else { 
    let xp            = User.Sipher.KGT.xp xp_base bk_base cur_blck last_mint
    let new_value     = (x: U120) => U120.add xp x
    let new_balance   = User.Sipher.PatriciaTree.mut balances miner (U120.new 0 0) new_value
    KDL.KGT.State.new cur_blck new_balance
  }


// mine_block    is the block that the person wants to mint
// last_mint     is the last time that xp was minted

// x = cur_blck
// y = last_mint
#kdl_name = KgtXp
User.Sipher.KGT.xp
  (xp_base         : U120)
  (bk_base         : U120)
  (cur_blck   : U120)
  (last_mint       : U120)
: U120
User.Sipher.KGT.xp xp_base  bk_base cur_blck last_mint = 
  if (U120.greater_equal last_mint cur_blck) { 
    U120.0
  } else {
    let halving = U120.div last_mint bk_base
    let value   = User.Sipher.KGT.XP_Per_Block xp_base halving bk_base
    U120.add value (User.Sipher.KGT.xp xp_base bk_base cur_blck (U120.inc last_mint))
  }


// Returns the XP that we receive per Halving
#kdl_name = KgtPH
User.Sipher.KGT.XP_Per_Halving
  (xp_base         : U120)
  (cur_hlv : U120)
: U120 {
  U120.div xp_base (U120.shift_left (U120.new 0 1) cur_hlv)
}


// XP that can be obtained per block
#kdl_name = KgtPb
User.Sipher.KGT.XP_Per_Block
  (xp_base         : U120)
  (cur_hlv : U120)
  (bk_base         : U120)
: U120 { 
  U120.div (User.Sipher.KGT.XP_Per_Halving xp_base cur_hlv) bk_base
}
